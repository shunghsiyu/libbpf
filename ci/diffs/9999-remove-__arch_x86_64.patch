diff --git a/tools/testing/selftests/bpf/prog_tests/sockmap_basic.c b/tools/testing/selftests/bpf/prog_tests/sockmap_basic.c
index 415f689..da3d87a 100644
--- a/tools/testing/selftests/bpf/prog_tests/sockmap_basic.c
+++ b/tools/testing/selftests/bpf/prog_tests/sockmap_basic.c
@@ -392,10 +392,10 @@ out:
 static void test_sockmap_skb_verdict_shutdown(void)
 {
 	struct epoll_event ev, events[MAX_EVENTS];
-	int n, err, map, verdict, s, c1, p1;
 	struct test_sockmap_pass_prog *skel;
-	int epollfd;
+	int n, err, map, verdict, c1, p1;
 	int zero = 0;
+	int epollfd;
 	char b;
 
 	skel = test_sockmap_pass_prog__open_and_load();
@@ -409,10 +409,7 @@ static void test_sockmap_skb_verdict_shutdown(void)
 	if (!ASSERT_OK(err, "bpf_prog_attach"))
 		goto out;
 
-	s = socket_loopback(AF_INET, SOCK_STREAM);
-	if (s < 0)
-		goto out;
-	err = create_pair(s, AF_INET, SOCK_STREAM, &c1, &p1);
+	err = create_pair(AF_INET, SOCK_STREAM, &c1, &p1);
 	if (err < 0)
 		goto out;
 
@@ -508,30 +505,15 @@ out:
 		test_sockmap_drop_prog__destroy(drop);
 }
 
-static void test_sockmap_skb_verdict_peek(void)
+static void test_sockmap_skb_verdict_peek_helper(int map)
 {
-	int err, map, verdict, s, c1, p1, zero = 0, sent, recvd, avail;
-	struct test_sockmap_pass_prog *pass;
+	int err, c1, p1, zero = 0, sent, recvd, avail;
 	char snd[256] = "0123456789";
 	char rcv[256] = "0";
 
-	pass = test_sockmap_pass_prog__open_and_load();
-	if (!ASSERT_OK_PTR(pass, "open_and_load"))
+	err = create_pair(AF_INET, SOCK_STREAM, &c1, &p1);
+	if (!ASSERT_OK(err, "create_pair()"))
 		return;
-	verdict = bpf_program__fd(pass->progs.prog_skb_verdict);
-	map = bpf_map__fd(pass->maps.sock_map_rx);
-
-	err = bpf_prog_attach(verdict, map, BPF_SK_SKB_STREAM_VERDICT, 0);
-	if (!ASSERT_OK(err, "bpf_prog_attach"))
-		goto out;
-
-	s = socket_loopback(AF_INET, SOCK_STREAM);
-	if (!ASSERT_GT(s, -1, "socket_loopback(s)"))
-		goto out;
-
-	err = create_pair(s, AF_INET, SOCK_STREAM, &c1, &p1);
-	if (!ASSERT_OK(err, "create_pairs(s)"))
-		goto out;
 
 	err = bpf_map_update_elem(map, &zero, &c1, BPF_NOEXIST);
 	if (!ASSERT_OK(err, "bpf_map_update_elem(c1)"))
@@ -553,6 +535,25 @@ static void test_sockmap_skb_verdict_peek(void)
 out_close:
 	close(c1);
 	close(p1);
+}
+
+static void test_sockmap_skb_verdict_peek(void)
+{
+	struct test_sockmap_pass_prog *pass;
+	int err, map, verdict;
+
+	pass = test_sockmap_pass_prog__open_and_load();
+	if (!ASSERT_OK_PTR(pass, "open_and_load"))
+		return;
+	verdict = bpf_program__fd(pass->progs.prog_skb_verdict);
+	map = bpf_map__fd(pass->maps.sock_map_rx);
+
+	err = bpf_prog_attach(verdict, map, BPF_SK_SKB_STREAM_VERDICT, 0);
+	if (!ASSERT_OK(err, "bpf_prog_attach"))
+		goto out;
+
+	test_sockmap_skb_verdict_peek_helper(map);
+
 out:
 	test_sockmap_pass_prog__destroy(pass);
 }
@@ -588,50 +589,6 @@ static void test_sockmap_unconnected_unix(void)
 	close(dgram);
 }
 
-static void test_sockmap_skb_verdict_vsock_poll(void)
-{
-	struct test_sockmap_pass_prog *skel;
-	int err, map, conn, peer;
-	struct bpf_program *prog;
-	struct bpf_link *link;
-	char buf = 'x';
-	int zero = 0;
-
-	skel = test_sockmap_pass_prog__open_and_load();
-	if (!ASSERT_OK_PTR(skel, "open_and_load"))
-		return;
-
-	if (create_pair(AF_VSOCK, SOCK_STREAM, &conn, &peer))
-		goto destroy;
-
-	prog = skel->progs.prog_skb_verdict;
-	map = bpf_map__fd(skel->maps.sock_map_rx);
-	link = bpf_program__attach_sockmap(prog, map);
-	if (!ASSERT_OK_PTR(link, "bpf_program__attach_sockmap"))
-		goto close;
-
-	err = bpf_map_update_elem(map, &zero, &conn, BPF_ANY);
-	if (!ASSERT_OK(err, "bpf_map_update_elem"))
-		goto detach;
-
-	if (xsend(peer, &buf, 1, 0) != 1)
-		goto detach;
-
-	err = poll_read(conn, IO_TIMEOUT_SEC);
-	if (!ASSERT_OK(err, "poll"))
-		goto detach;
-
-	if (xrecv_nonblock(conn, &buf, 1, 0) != 1)
-		FAIL("xrecv_nonblock");
-detach:
-	bpf_link__detach(link);
-close:
-	xclose(conn);
-	xclose(peer);
-destroy:
-	test_sockmap_pass_prog__destroy(skel);
-}
-
 static void test_sockmap_vsock_unconnected(void)
 {
 	struct sockaddr_storage addr;
@@ -707,8 +664,6 @@ void test_sockmap_basic(void)
 
 	if (test__start_subtest("sockmap unconnected af_unix"))
 		test_sockmap_unconnected_unix();
-	if (test__start_subtest("sockmap skb_verdict vsock poll"))
-		test_sockmap_skb_verdict_vsock_poll();
 	if (test__start_subtest("sockmap vsock unconnected"))
 		test_sockmap_vsock_unconnected();
 }
diff --git a/tools/testing/selftests/bpf/prog_tests/sockmap_helpers.h b/tools/testing/selftests/bpf/prog_tests/sockmap_helpers.h
index 36d829a..68175ce 100644
--- a/tools/testing/selftests/bpf/prog_tests/sockmap_helpers.h
+++ b/tools/testing/selftests/bpf/prog_tests/sockmap_helpers.h
@@ -3,6 +3,9 @@
 
 #include <linux/vm_sockets.h>
 
+/* include/linux/net.h */
+#define SOCK_TYPE_MASK 0xf
+
 #define IO_TIMEOUT_SEC 30
 #define MAX_STRERR_LEN 256
 #define MAX_TEST_NAME 80
@@ -312,54 +315,6 @@ static inline int add_to_sockmap(int sock_mapfd, int fd1, int fd2)
 	return xbpf_map_update_elem(sock_mapfd, &key, &value, BPF_NOEXIST);
 }
 
-static inline int create_pair(int s, int family, int sotype, int *c, int *p)
-{
-	struct sockaddr_storage addr;
-	socklen_t len;
-	int err = 0;
-
-	len = sizeof(addr);
-	err = xgetsockname(s, sockaddr(&addr), &len);
-	if (err)
-		return err;
-
-	*c = xsocket(family, sotype, 0);
-	if (*c < 0)
-		return errno;
-	err = xconnect(*c, sockaddr(&addr), len);
-	if (err) {
-		err = errno;
-		goto close_cli0;
-	}
-
-	*p = xaccept_nonblock(s, NULL, NULL);
-	if (*p < 0) {
-		err = errno;
-		goto close_cli0;
-	}
-	return err;
-close_cli0:
-	close(*c);
-	return err;
-}
-
-static inline int create_socket_pairs(int s, int family, int sotype,
-				      int *c0, int *c1, int *p0, int *p1)
-{
-	int err;
-
-	err = create_pair(s, family, sotype, c0, p0);
-	if (err)
-		return err;
-
-	err = create_pair(s, family, sotype, c1, p1);
-	if (err) {
-		close(*c0);
-		close(*p0);
-	}
-	return err;
-}
-
 static inline int enable_reuseport(int s, int progfd)
 {
 	int err, one = 1;
@@ -412,5 +367,92 @@ static inline int socket_loopback(int family, int sotype)
 	return socket_loopback_reuseport(family, sotype, -1);
 }
 
+static inline int create_pair(int family, int sotype, int *p0, int *p1)
+{
+	struct sockaddr_storage addr;
+	socklen_t len = sizeof(addr);
+	int s, c, p, err;
+
+	s = socket_loopback(family, sotype);
+	if (s < 0)
+		return s;
+
+	err = xgetsockname(s, sockaddr(&addr), &len);
+	if (err)
+		goto close_s;
+
+	c = xsocket(family, sotype, 0);
+	if (c < 0) {
+		err = c;
+		goto close_s;
+	}
+
+	err = connect(c, sockaddr(&addr), len);
+	if (err) {
+		if (errno != EINPROGRESS) {
+			FAIL_ERRNO("connect");
+			goto close_c;
+		}
+
+		err = poll_connect(c, IO_TIMEOUT_SEC);
+		if (err) {
+			FAIL_ERRNO("poll_connect");
+			goto close_c;
+		}
+	}
+
+	switch (sotype & SOCK_TYPE_MASK) {
+	case SOCK_DGRAM:
+		err = xgetsockname(c, sockaddr(&addr), &len);
+		if (err)
+			goto close_c;
+
+		err = xconnect(s, sockaddr(&addr), len);
+		if (!err) {
+			*p0 = s;
+			*p1 = c;
+			return err;
+		}
+		break;
+	case SOCK_STREAM:
+	case SOCK_SEQPACKET:
+		p = xaccept_nonblock(s, NULL, NULL);
+		if (p >= 0) {
+			*p0 = p;
+			*p1 = c;
+			goto close_s;
+		}
+
+		err = p;
+		break;
+	default:
+		FAIL("Unsupported socket type %#x", sotype);
+		err = -EOPNOTSUPP;
+	}
+
+close_c:
+	close(c);
+close_s:
+	close(s);
+	return err;
+}
+
+static inline int create_socket_pairs(int s, int family, int sotype,
+				      int *c0, int *c1, int *p0, int *p1)
+{
+	int err;
+
+	err = create_pair(family, sotype, c0, p0);
+	if (err)
+		return err;
+
+	err = create_pair(family, sotype, c1, p1);
+	if (err) {
+		close(*c0);
+		close(*p0);
+	}
+
+	return err;
+}
 
 #endif // __SOCKMAP_HELPERS__
diff --git a/tools/testing/selftests/bpf/progs/test_skmsg_load_helpers.c b/tools/testing/selftests/bpf/progs/test_skmsg_load_helpers.c
index 45e8fc7..b753672 100644
--- a/tools/testing/selftests/bpf/progs/test_skmsg_load_helpers.c
+++ b/tools/testing/selftests/bpf/progs/test_skmsg_load_helpers.c
@@ -24,8 +24,7 @@ struct {
 	__type(value, __u64);
 } socket_storage SEC(".maps");
 
-SEC("sk_msg")
-int prog_msg_verdict(struct sk_msg_md *msg)
+static int prog_msg_verdict_common(struct sk_msg_md *msg)
 {
 	struct task_struct *task = (struct task_struct *)bpf_get_current_task();
 	int verdict = SK_PASS;
@@ -44,4 +43,10 @@ int prog_msg_verdict(struct sk_msg_md *msg)
 	return verdict;
 }
 
+SEC("sk_msg")
+int prog_msg_verdict(struct sk_msg_md *msg)
+{
+	return prog_msg_verdict_common(msg);
+}
+
 char _license[] SEC("license") = "GPL";
diff --git a/tools/testing/selftests/bpf/progs/verifier_sdiv.c b/tools/testing/selftests/bpf/progs/verifier_sdiv.c
index 3bdc7ed..0990f88 100644
--- a/tools/testing/selftests/bpf/progs/verifier_sdiv.c
+++ b/tools/testing/selftests/bpf/progs/verifier_sdiv.c
@@ -1,7 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 
 #include <linux/bpf.h>
-#include <limits.h>
 #include <bpf/bpf_helpers.h>
 #include "bpf_misc.h"
 
@@ -768,444 +767,6 @@ __naked void smod64_zero_divisor(void)
 "	::: __clobber_all);
 }
 
-SEC("socket")
-__description("SDIV64, overflow r/r, LLONG_MIN/-1")
-__success __retval(1)
-__arch_x86_64
-__xlated("0: r2 = 0x8000000000000000")
-__xlated("2: r3 = -1")
-__xlated("3: r4 = r2")
-__xlated("4: r11 = r3")
-__xlated("5: r11 += 1")
-__xlated("6: if r11 > 0x1 goto pc+4")
-__xlated("7: if r11 == 0x0 goto pc+1")
-__xlated("8: r2 = 0")
-__xlated("9: r2 = -r2")
-__xlated("10: goto pc+1")
-__xlated("11: r2 s/= r3")
-__xlated("12: r0 = 0")
-__xlated("13: if r2 != r4 goto pc+1")
-__xlated("14: r0 = 1")
-__xlated("15: exit")
-__naked void sdiv64_overflow_rr(void)
-{
-	asm volatile ("					\
-	r2 = %[llong_min] ll;				\
-	r3 = -1;					\
-	r4 = r2;					\
-	r2 s/= r3;					\
-	r0 = 0;						\
-	if r2 != r4 goto +1;				\
-	r0 = 1;						\
-	exit;						\
-"	:
-	: __imm_const(llong_min, LLONG_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV64, r/r, small_val/-1")
-__success __retval(-5)
-__arch_x86_64
-__xlated("0: r2 = 5")
-__xlated("1: r3 = -1")
-__xlated("2: r11 = r3")
-__xlated("3: r11 += 1")
-__xlated("4: if r11 > 0x1 goto pc+4")
-__xlated("5: if r11 == 0x0 goto pc+1")
-__xlated("6: r2 = 0")
-__xlated("7: r2 = -r2")
-__xlated("8: goto pc+1")
-__xlated("9: r2 s/= r3")
-__xlated("10: r0 = r2")
-__xlated("11: exit")
-__naked void sdiv64_rr_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	r2 = 5;						\
-	r3 = -1;					\
-	r2 s/= r3;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV64, overflow r/i, LLONG_MIN/-1")
-__success __retval(1)
-__arch_x86_64
-__xlated("0: r2 = 0x8000000000000000")
-__xlated("2: r4 = r2")
-__xlated("3: r2 = -r2")
-__xlated("4: r0 = 0")
-__xlated("5: if r2 != r4 goto pc+1")
-__xlated("6: r0 = 1")
-__xlated("7: exit")
-__naked void sdiv64_overflow_ri(void)
-{
-	asm volatile ("					\
-	r2 = %[llong_min] ll;				\
-	r4 = r2;					\
-	r2 s/= -1;					\
-	r0 = 0;						\
-	if r2 != r4 goto +1;				\
-	r0 = 1;						\
-	exit;						\
-"	:
-	: __imm_const(llong_min, LLONG_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV64, r/i, small_val/-1")
-__success __retval(-5)
-__arch_x86_64
-__xlated("0: r2 = 5")
-__xlated("1: r4 = r2")
-__xlated("2: r2 = -r2")
-__xlated("3: r0 = r2")
-__xlated("4: exit")
-__naked void sdiv64_ri_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	r2 = 5;						\
-	r4 = r2;					\
-	r2 s/= -1;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV32, overflow r/r, INT_MIN/-1")
-__success __retval(1)
-__arch_x86_64
-__xlated("0: w2 = -2147483648")
-__xlated("1: w3 = -1")
-__xlated("2: w4 = w2")
-__xlated("3: r11 = r3")
-__xlated("4: w11 += 1")
-__xlated("5: if w11 > 0x1 goto pc+4")
-__xlated("6: if w11 == 0x0 goto pc+1")
-__xlated("7: w2 = 0")
-__xlated("8: w2 = -w2")
-__xlated("9: goto pc+1")
-__xlated("10: w2 s/= w3")
-__xlated("11: r0 = 0")
-__xlated("12: if w2 != w4 goto pc+1")
-__xlated("13: r0 = 1")
-__xlated("14: exit")
-__naked void sdiv32_overflow_rr(void)
-{
-	asm volatile ("					\
-	w2 = %[int_min];				\
-	w3 = -1;					\
-	w4 = w2;					\
-	w2 s/= w3;					\
-	r0 = 0;						\
-	if w2 != w4 goto +1;				\
-	r0 = 1;						\
-	exit;						\
-"	:
-	: __imm_const(int_min, INT_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV32, r/r, small_val/-1")
-__success __retval(5)
-__arch_x86_64
-__xlated("0: w2 = -5")
-__xlated("1: w3 = -1")
-__xlated("2: w4 = w2")
-__xlated("3: r11 = r3")
-__xlated("4: w11 += 1")
-__xlated("5: if w11 > 0x1 goto pc+4")
-__xlated("6: if w11 == 0x0 goto pc+1")
-__xlated("7: w2 = 0")
-__xlated("8: w2 = -w2")
-__xlated("9: goto pc+1")
-__xlated("10: w2 s/= w3")
-__xlated("11: w0 = w2")
-__xlated("12: exit")
-__naked void sdiv32_rr_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	w2 = -5;					\
-	w3 = -1;					\
-	w4 = w2;					\
-	w2 s/= w3;					\
-	w0 = w2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV32, overflow r/i, INT_MIN/-1")
-__success __retval(1)
-__arch_x86_64
-__xlated("0: w2 = -2147483648")
-__xlated("1: w4 = w2")
-__xlated("2: w2 = -w2")
-__xlated("3: r0 = 0")
-__xlated("4: if w2 != w4 goto pc+1")
-__xlated("5: r0 = 1")
-__xlated("6: exit")
-__naked void sdiv32_overflow_ri(void)
-{
-	asm volatile ("					\
-	w2 = %[int_min];				\
-	w4 = w2;					\
-	w2 s/= -1;					\
-	r0 = 0;						\
-	if w2 != w4 goto +1;				\
-	r0 = 1;						\
-	exit;						\
-"	:
-	: __imm_const(int_min, INT_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SDIV32, r/i, small_val/-1")
-__success __retval(-5)
-__arch_x86_64
-__xlated("0: w2 = 5")
-__xlated("1: w4 = w2")
-__xlated("2: w2 = -w2")
-__xlated("3: w0 = w2")
-__xlated("4: exit")
-__naked void sdiv32_ri_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	w2 = 5;						\
-	w4 = w2;					\
-	w2 s/= -1;					\
-	w0 = w2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD64, overflow r/r, LLONG_MIN/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: r2 = 0x8000000000000000")
-__xlated("2: r3 = -1")
-__xlated("3: r4 = r2")
-__xlated("4: r11 = r3")
-__xlated("5: r11 += 1")
-__xlated("6: if r11 > 0x1 goto pc+3")
-__xlated("7: if r11 == 0x1 goto pc+3")
-__xlated("8: w2 = 0")
-__xlated("9: goto pc+1")
-__xlated("10: r2 s%= r3")
-__xlated("11: r0 = r2")
-__xlated("12: exit")
-__naked void smod64_overflow_rr(void)
-{
-	asm volatile ("					\
-	r2 = %[llong_min] ll;				\
-	r3 = -1;					\
-	r4 = r2;					\
-	r2 s%%= r3;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	: __imm_const(llong_min, LLONG_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD64, r/r, small_val/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: r2 = 5")
-__xlated("1: r3 = -1")
-__xlated("2: r4 = r2")
-__xlated("3: r11 = r3")
-__xlated("4: r11 += 1")
-__xlated("5: if r11 > 0x1 goto pc+3")
-__xlated("6: if r11 == 0x1 goto pc+3")
-__xlated("7: w2 = 0")
-__xlated("8: goto pc+1")
-__xlated("9: r2 s%= r3")
-__xlated("10: r0 = r2")
-__xlated("11: exit")
-__naked void smod64_rr_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	r2 = 5;						\
-	r3 = -1;					\
-	r4 = r2;					\
-	r2 s%%= r3;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD64, overflow r/i, LLONG_MIN/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: r2 = 0x8000000000000000")
-__xlated("2: r4 = r2")
-__xlated("3: w2 = 0")
-__xlated("4: r0 = r2")
-__xlated("5: exit")
-__naked void smod64_overflow_ri(void)
-{
-	asm volatile ("					\
-	r2 = %[llong_min] ll;				\
-	r4 = r2;					\
-	r2 s%%= -1;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	: __imm_const(llong_min, LLONG_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD64, r/i, small_val/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: r2 = 5")
-__xlated("1: r4 = r2")
-__xlated("2: w2 = 0")
-__xlated("3: r0 = r2")
-__xlated("4: exit")
-__naked void smod64_ri_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	r2 = 5;						\
-	r4 = r2;					\
-	r2 s%%= -1;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD32, overflow r/r, INT_MIN/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: w2 = -2147483648")
-__xlated("1: w3 = -1")
-__xlated("2: w4 = w2")
-__xlated("3: r11 = r3")
-__xlated("4: w11 += 1")
-__xlated("5: if w11 > 0x1 goto pc+3")
-__xlated("6: if w11 == 0x1 goto pc+4")
-__xlated("7: w2 = 0")
-__xlated("8: goto pc+1")
-__xlated("9: w2 s%= w3")
-__xlated("10: goto pc+1")
-__xlated("11: w2 = w2")
-__xlated("12: r0 = r2")
-__xlated("13: exit")
-__naked void smod32_overflow_rr(void)
-{
-	asm volatile ("					\
-	w2 = %[int_min];				\
-	w3 = -1;					\
-	w4 = w2;					\
-	w2 s%%= w3;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	: __imm_const(int_min, INT_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD32, r/r, small_val/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: w2 = -5")
-__xlated("1: w3 = -1")
-__xlated("2: w4 = w2")
-__xlated("3: r11 = r3")
-__xlated("4: w11 += 1")
-__xlated("5: if w11 > 0x1 goto pc+3")
-__xlated("6: if w11 == 0x1 goto pc+4")
-__xlated("7: w2 = 0")
-__xlated("8: goto pc+1")
-__xlated("9: w2 s%= w3")
-__xlated("10: goto pc+1")
-__xlated("11: w2 = w2")
-__xlated("12: r0 = r2")
-__xlated("13: exit")
-__naked void smod32_rr_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	w2 = -5;				\
-	w3 = -1;					\
-	w4 = w2;					\
-	w2 s%%= w3;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD32, overflow r/i, INT_MIN/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: w2 = -2147483648")
-__xlated("1: w4 = w2")
-__xlated("2: w2 = 0")
-__xlated("3: r0 = r2")
-__xlated("4: exit")
-__naked void smod32_overflow_ri(void)
-{
-	asm volatile ("					\
-	w2 = %[int_min];				\
-	w4 = w2;					\
-	w2 s%%= -1;					\
-	r0 = r2;					\
-	exit;						\
-"	:
-	: __imm_const(int_min, INT_MIN)
-	: __clobber_all);
-}
-
-SEC("socket")
-__description("SMOD32, r/i, small_val/-1")
-__success __retval(0)
-__arch_x86_64
-__xlated("0: w2 = 5")
-__xlated("1: w4 = w2")
-__xlated("2: w2 = 0")
-__xlated("3: w0 = w2")
-__xlated("4: exit")
-__naked void smod32_ri_divisor_neg_1(void)
-{
-	asm volatile ("					\
-	w2 = 5;						\
-	w4 = w2;					\
-	w2 s%%= -1;					\
-	w0 = w2;					\
-	exit;						\
-"	:
-	:
-	: __clobber_all);
-}
-
 #else
 
 SEC("socket")
