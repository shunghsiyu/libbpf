From 9af64efcfe8307131234fd7c3891f3f06a3ca634 Mon Sep 17 00:00:00 2001
From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date: Sat, 26 Apr 2025 09:11:41 +0000
Subject: [PATCH 2/8] Revert "selftests/bpf: Add tests for bpf_dynptr_copy"

This reverts commit 064e9aacfd70a7805eeb0fc9ec6e97247ea8bc4c.
---
 .../testing/selftests/bpf/prog_tests/dynptr.c |  21 ---
 .../selftests/bpf/progs/dynptr_success.c      | 123 +-----------------
 2 files changed, 5 insertions(+), 139 deletions(-)

diff --git a/tools/testing/selftests/bpf/prog_tests/dynptr.c b/tools/testing/selftests/bpf/prog_tests/dynptr.c
index e29cc16124c2..b614a5272dfd 100644
--- a/tools/testing/selftests/bpf/prog_tests/dynptr.c
+++ b/tools/testing/selftests/bpf/prog_tests/dynptr.c
@@ -10,7 +10,6 @@ enum test_setup_type {
 	SETUP_SYSCALL_SLEEP,
 	SETUP_SKB_PROG,
 	SETUP_SKB_PROG_TP,
-	SETUP_XDP_PROG,
 };
 
 static struct {
@@ -19,8 +18,6 @@ static struct {
 } success_tests[] = {
 	{"test_read_write", SETUP_SYSCALL_SLEEP},
 	{"test_dynptr_data", SETUP_SYSCALL_SLEEP},
-	{"test_dynptr_copy", SETUP_SYSCALL_SLEEP},
-	{"test_dynptr_copy_xdp", SETUP_XDP_PROG},
 	{"test_ringbuf", SETUP_SYSCALL_SLEEP},
 	{"test_skb_readonly", SETUP_SKB_PROG},
 	{"test_dynptr_skb_data", SETUP_SKB_PROG},
@@ -123,24 +120,6 @@ static void verify_success(const char *prog_name, enum test_setup_type setup_typ
 
 		break;
 	}
-	case SETUP_XDP_PROG:
-	{
-		char data[5000];
-		int err, prog_fd;
-		LIBBPF_OPTS(bpf_test_run_opts, opts,
-			    .data_in = &data,
-			    .data_size_in = sizeof(data),
-			    .repeat = 1,
-		);
-
-		prog_fd = bpf_program__fd(prog);
-		err = bpf_prog_test_run_opts(prog_fd, &opts);
-
-		if (!ASSERT_OK(err, "test_run"))
-			goto cleanup;
-
-		break;
-	}
 	}
 
 	ASSERT_EQ(skel->bss->err, 0, "err");
diff --git a/tools/testing/selftests/bpf/progs/dynptr_success.c b/tools/testing/selftests/bpf/progs/dynptr_success.c
index e1fba28e4a86..bfcc85686cf0 100644
--- a/tools/testing/selftests/bpf/progs/dynptr_success.c
+++ b/tools/testing/selftests/bpf/progs/dynptr_success.c
@@ -1,19 +1,20 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright (c) 2022 Facebook */
 
-#include <vmlinux.h>
 #include <string.h>
 #include <stdbool.h>
+#include <linux/bpf.h>
 #include <bpf/bpf_helpers.h>
 #include <bpf/bpf_tracing.h>
 #include "bpf_misc.h"
+#include "bpf_kfuncs.h"
 #include "errno.h"
 
 char _license[] SEC("license") = "GPL";
 
 int pid, err, val;
 
-struct ringbuf_sample {
+struct sample {
 	int pid;
 	int seq;
 	long value;
@@ -120,7 +121,7 @@ int test_dynptr_data(void *ctx)
 
 static int ringbuf_callback(__u32 index, void *data)
 {
-	struct ringbuf_sample *sample;
+	struct sample *sample;
 
 	struct bpf_dynptr *ptr = (struct bpf_dynptr *)data;
 
@@ -137,7 +138,7 @@ SEC("?tp/syscalls/sys_enter_nanosleep")
 int test_ringbuf(void *ctx)
 {
 	struct bpf_dynptr ptr;
-	struct ringbuf_sample *sample;
+	struct sample *sample;
 
 	if (bpf_get_current_pid_tgid() >> 32 != pid)
 		return 0;
@@ -566,117 +567,3 @@ int BPF_PROG(test_dynptr_skb_tp_btf, void *skb, void *location)
 
 	return 1;
 }
-
-static inline int bpf_memcmp(const char *a, const char *b, u32 size)
-{
-	int i;
-
-	bpf_for(i, 0, size) {
-		if (a[i] != b[i])
-			return a[i] < b[i] ? -1 : 1;
-	}
-	return 0;
-}
-
-SEC("?tp/syscalls/sys_enter_nanosleep")
-int test_dynptr_copy(void *ctx)
-{
-	char data[] = "hello there, world!!";
-	char buf[32] = {'\0'};
-	__u32 sz = sizeof(data);
-	struct bpf_dynptr src, dst;
-
-	bpf_ringbuf_reserve_dynptr(&ringbuf, sz, 0, &src);
-	bpf_ringbuf_reserve_dynptr(&ringbuf, sz, 0, &dst);
-
-	/* Test basic case of copying contiguous memory backed dynptrs */
-	err = bpf_dynptr_write(&src, 0, data, sz, 0);
-	err = err ?: bpf_dynptr_copy(&dst, 0, &src, 0, sz);
-	err = err ?: bpf_dynptr_read(buf, sz, &dst, 0, 0);
-	err = err ?: bpf_memcmp(data, buf, sz);
-
-	/* Test that offsets are handled correctly */
-	err = err ?: bpf_dynptr_copy(&dst, 3, &src, 5, sz - 5);
-	err = err ?: bpf_dynptr_read(buf, sz - 5, &dst, 3, 0);
-	err = err ?: bpf_memcmp(data + 5, buf, sz - 5);
-
-	bpf_ringbuf_discard_dynptr(&src, 0);
-	bpf_ringbuf_discard_dynptr(&dst, 0);
-	return 0;
-}
-
-SEC("xdp")
-int test_dynptr_copy_xdp(struct xdp_md *xdp)
-{
-	struct bpf_dynptr ptr_buf, ptr_xdp;
-	char data[] = "qwertyuiopasdfghjkl";
-	char buf[32] = {'\0'};
-	__u32 len = sizeof(data);
-	int i, chunks = 200;
-
-	/* ptr_xdp is backed by non-contiguous memory */
-	bpf_dynptr_from_xdp(xdp, 0, &ptr_xdp);
-	bpf_ringbuf_reserve_dynptr(&ringbuf, len * chunks, 0, &ptr_buf);
-
-	/* Destination dynptr is backed by non-contiguous memory */
-	bpf_for(i, 0, chunks) {
-		err = bpf_dynptr_write(&ptr_buf, i * len, data, len, 0);
-		if (err)
-			goto out;
-	}
-
-	err = bpf_dynptr_copy(&ptr_xdp, 0, &ptr_buf, 0, len * chunks);
-	if (err)
-		goto out;
-
-	bpf_for(i, 0, chunks) {
-		__builtin_memset(buf, 0, sizeof(buf));
-		err = bpf_dynptr_read(&buf, len, &ptr_xdp, i * len, 0);
-		if (err)
-			goto out;
-		if (bpf_memcmp(data, buf, len) != 0)
-			goto out;
-	}
-
-	/* Source dynptr is backed by non-contiguous memory */
-	__builtin_memset(buf, 0, sizeof(buf));
-	bpf_for(i, 0, chunks) {
-		err = bpf_dynptr_write(&ptr_buf, i * len, buf, len, 0);
-		if (err)
-			goto out;
-	}
-
-	err = bpf_dynptr_copy(&ptr_buf, 0, &ptr_xdp, 0, len * chunks);
-	if (err)
-		goto out;
-
-	bpf_for(i, 0, chunks) {
-		__builtin_memset(buf, 0, sizeof(buf));
-		err = bpf_dynptr_read(&buf, len, &ptr_buf, i * len, 0);
-		if (err)
-			goto out;
-		if (bpf_memcmp(data, buf, len) != 0)
-			goto out;
-	}
-
-	/* Both source and destination dynptrs are backed by non-contiguous memory */
-	err = bpf_dynptr_copy(&ptr_xdp, 2, &ptr_xdp, len, len * (chunks - 1));
-	if (err)
-		goto out;
-
-	bpf_for(i, 0, chunks - 1) {
-		__builtin_memset(buf, 0, sizeof(buf));
-		err = bpf_dynptr_read(&buf, len, &ptr_xdp, 2 + i * len, 0);
-		if (err)
-			goto out;
-		if (bpf_memcmp(data, buf, len) != 0)
-			goto out;
-	}
-
-	if (bpf_dynptr_copy(&ptr_xdp, 2000, &ptr_xdp, 0, len * chunks) != -E2BIG)
-		err = 1;
-
-out:
-	bpf_ringbuf_discard_dynptr(&ptr_buf, 0);
-	return XDP_DROP;
-}
-- 
2.49.0

